name : Executando Testes
on:
    workflow_call:
jobs:
    unit-tests:
        name: Teste de Unidade üß™
        runs-on: ubuntu-latest
        steps:
            - name: Obtendo c√≥digo do projeto
              uses: actions/checkout@v4
            - name: Setup dotnet
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: 8.0.300
            - name: Executando testes de unidade
              working-directory: ./src
              run: dotnet test ./Review-Filmes.Test.Unit/Review-Filmes.Test.Unit.csproj
    
    integrations-testes:
        name: Teste de Integra√ß√£o
        runs-on: ubuntu-latest
        services:
            postgres:
                image: postgres:latest # boas praticas √© usar versao especifica, mas √© somente uma demo
                env:
                    POSTGRES_USER: review # boas pratica seria obter esses valores das secrets
                    POSTGRES_PASSWORD: 123456
                    POSTGRES_DB: review-filmes
                ports:
                    - 5432:5432
        steps:
            - name: Obtendo c√≥digo do projeto
              uses: actions/checkout@v4
            - name: Setup dotnet
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: 8.0.300   
            - name: Executando testes integra√ß√£o
              working-directory: ./src
              run: dotnet test ./Review-Filmes.Test.Integration/Review-Filmes.Test.Integration.csproj
              env:
                ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=review-filmes;Username=review;Password=123456" 

    sonar-qube:
        name: Scan SonarQube
        runs-on: ubuntu-latest
        steps:
          - name: Checkout Repository ‚è≥
            uses: actions/checkout@v4
            with:
              fetch-depth: 0  # Necess√°rio para SonarCloud
    
          - name: Configure Encoding üíª
            run: |
              export DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false
              export LANG=en_US.UTF-8
    
          - name: Install .NET Coverage Tool ‚è±Ô∏è
            run: dotnet tool install --global dotnet-coverage
    
          - name: Configuring .NET Core SDK ‚è±Ô∏è 
            uses: actions/setup-dotnet@v4.0.0
            with:
              dotnet-version: 8.0.300  # Certifique-se de usar a vers√£o correta
    
          - name: Restoring dependencies ‚è±Ô∏è    
            run: dotnet restore Review-Filmes.sln --force --no-cache
    
          - name: Building Application üöÄ
            run: dotnet build Review-Filmes.sln -c Release --no-restore 
    
          - name: Run Unit Tests with Coverage
            run: dotnet-coverage collect 'dotnet test -c Release' -f xml -o coverage.xml
    
          - name: Set up JDK 17 ‚è±Ô∏è
            uses: actions/setup-java@v4
            with:
              java-version: 17
              distribution: 'zulu' 
    
          - name: Cache SonarQube Cloud packages ‚è≥
            uses: actions/cache@v4
            with:
              path: ~/.sonar/cache
              key: ${{ runner.os }}-sonar
              restore-keys: ${{ runner.os }}-sonar
    
          - name: Cache SonarQube Cloud scanner ‚è≥
            id: cache-sonar-scanner
            uses: actions/cache@v4
            with:
              path: .sonar/scanner
              key: ${{ runner.os }}-sonar-scanner
              restore-keys: ${{ runner.os }}-sonar-scanner
    
          - name: Install SonarQube Cloud scanner üõ†Ô∏è
            if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
            run: |
              mkdir -p .sonar/scanner
              dotnet tool update dotnet-sonarscanner --tool-path .sonar/scanner
    
          - name: Debug Sonar Token üîç
            run: echo "Sonar Token Length: ${#SONAR_TOKEN}"
            env:
              SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    
          - name: Build and analyze  üëÄüêû
            env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            run: |
              .sonar/scanner/dotnet-sonarscanner begin /k:"casoftsolutions_master-ci-cd" /o:"casoftsolutions" /d:sonar.token="$SONAR_TOKEN" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml /d:sonar.qualitygate.wait=true
              dotnet build Review-Filmes.sln -c Release
              dotnet-coverage collect 'dotnet test -c Release' -f xml -o coverage.xml
              .sonar/scanner/dotnet-sonarscanner end /d:sonar.token="$SONAR_TOKEN"
                
# Obs: por serem teste, nao precisa usar needs entre eles, pois se um falhar, j√° vai para a execucao da pipeline                    